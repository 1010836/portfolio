-- @atlcompiler emftvm

-- @path Analysis=http://www.eclipse.org/uml2/5.0.0/UML
-- @path Design=http://www.eclipse.org/uml2/5.0.0/UML
  
module Analysis2Design;
create OUT : Design from IN : Analysis;

helper context Analysis!Model def : referencedInCRUDUseCase() : Set( Analysis!Class ) = Analysis!Class.allInstances()->select( c |  
			not c.eAnnotations->select(a | a.source = 'http://pt.isep.edom/entity')->asSet()->isEmpty()	-- must be annotated as entity
			and Analysis!UseCase.allInstances()->select( uc | 
				uc.eAnnotations->select( anot |
					anot.source = 'http://pt.isep.edom/crud' and anot.references->includes(c)
				)->asSet()->notEmpty()
			)->asSet()->notEmpty() )->asSet();

rule Model2Model {
	from 
		sm: Analysis!Model (sm.name = 'domain')
	to 
		tm: Design!Model (
			name <- 'design-model'
		, packagedElement <- sm.referencedInCRUDUseCase()
		)
}
	
rule Entity2Class {
	from
		sm : Analysis!Class (
			not sm.eAnnotations->select(a | a.source = 'http://pt.isep.edom/entity')->asSet()->isEmpty()	-- must be annotated as entity
			and Analysis!UseCase.allInstances()->select(
				uc | uc.eAnnotations->select(
					a | a.source = 'http://pt.isep.edom/crud' and a.references->includes(sm)
					)->asSet()->notEmpty()
				)->asSet()->notEmpty()				-- must be referenced by a CRUD use case
			)
	to
		tm : Design!Class (
			name <- sm.name	
		),
		tmDetails :  Design!Class (
			name <- sm.name	+ 'Details'
		),
		tmPresenter :  Design!Class (
			name <- sm.name	+ 'sPresenter'
		)
}

