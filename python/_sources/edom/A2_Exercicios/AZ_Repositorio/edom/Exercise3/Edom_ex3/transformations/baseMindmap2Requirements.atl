-- @atlcompiler emftvm 

-- @path MMMindmap=/Edom_ex3/metamodels/mindmapBase.ecore
-- @path MMRequirements=/Edom_ex3/metamodels/requirements.ecore

module baseMindmap2Requirements;
create OUT : MMRequirements from IN : MMMindmap;

-- A counter for RequirementGroup ID
helper def: contIdRG: Integer = 0;

-- To increment the counter 
helper context Integer def: inc(): Integer = self + 1;


--implementation of requirement 1
rule Map2Model {
	from
		s: MMMindmap!"Map"
	to
		t: MMRequirements!Model (
			title <- s.title,
			groups <- s.elements->select(x | x.oclIsKindOf(MMMindmap!Topic) and x.oclAsType(MMMindmap!Topic).parent.oclIsUndefined())
		)
}

--implementation of requirement 2 : only for root topics
rule RootTopic2RequirementGroup {
	from
		s: MMMindmap!Topic ( s.parent.oclIsUndefined() )
	to
		t: MMRequirements!RequirementGroup (
			name <- s.name,
			description <- s.description,
			children <-  s.subtopics
		)
	do { 
		-- if (s.parent.oclIsUndefined())  ('No Parent: '+s.name).debug(); else ('Has Parent: '+s.parent.name).debug();
		thisModule.contIdRG <- thisModule.contIdRG.inc(); 
		t.id <- 'G' + thisModule.contIdRG.toString();
	}
}

--implementation of requirement 2 : for topics that are not root topics
rule Topic2RequirementGroup {
	from
		s: MMMindmap!Topic (not s.parent.oclIsUndefined())

	to
		t: MMRequirements!RequirementGroup (
			name <- s.name,
			description <- s.description,
			children <-  s.subtopics,
			parent <- s.parent
		) 
		
	do { 
		-- ('With Parent: '+s.name).debug();
		-- s.parent.name.debug();		
		thisModule.contIdRG <- thisModule.contIdRG.inc(); 
		t.id <- 'G' + thisModule.contIdRG.toString();
	}
}

