-- @atlcompiler emftvm

-- @path Analysis=http://www.eclipse.org/uml2/5.0.0/UML
-- @path Design=http://www.eclipse.org/uml2/5.0.0/UML
    
module analysis2design2;
create OUT : Design from IN : Analysis;
 
helper context Analysis!Model def : referencedInCRUDUseCase() : Set( Analysis!Class ) = Analysis!Class.allInstances()->select( c |  
			not c.eAnnotations->select(a | a.source = 'http://pt.isep.edom/entity')->asSet()->isEmpty()	-- must be annotated as entity
			and Analysis!UseCase.allInstances()->select( uc | 
				uc.eAnnotations->select( anot |
					anot.source = 'http://pt.isep.edom/crud' and anot.references->includes(c)
				)->asSet()->notEmpty()
			)->asSet()->notEmpty() )->asSet();

helper def : sourceModel : Analysis!Model = Analysis!Model.allInstances()->select(x | x.name = 'domain')->asOrderedSet()->first();
 
rule Model2Model {
	from 
		sm: Analysis!Model (sm.name = 'domain')
	to 
		tm: Design!Model (
			name <- sm.name+'-design',
			packagedElement <- sm.referencedInCRUDUseCase()->union(Set{ tString, tBoolean, tInteger, tDouble })
		)
		-- These are the base types we need
		, tString : Design!Class (
			name <- 'String'	
		)
		, tBoolean : Design!Class (
			name <- 'Boolean'
		)
		, tInteger : Design!Class (
			name <- 'Integer'	
		)
		, tDouble : Design!Class (
			name <- 'Double'	
		)
}
	
rule Entity2Class {
	from
		sm : Analysis!Class (
			not sm.eAnnotations->select(a | a.source = 'http://pt.isep.edom/entity')->asSet()->isEmpty()	-- must be annotated as entity
			and Design!UseCase.allInstances()->select(
				uc | uc.eAnnotations->select(
					a | a.source = 'http://pt.isep.edom/crud' and a.references->includes(sm)
					)->asSet()->notEmpty()
				)->asSet()->notEmpty()				-- must be referenced by a CRUD use case
			)
	to
		tm : Design!Class (
			name <- sm.name	
		) 
	-- For the operations...
	do {
			tm.ownedOperation <- Set{
					thisModule.createOperation('add'+sm.name, 'tBoolean', Set{ Tuple{ name='parm2', type='tDouble' }, Tuple{ name='parm3', type='Contact' }} ),
					thisModule.createOperation('delete'+sm.name, 'Contact', Set{ Tuple{ name='parm2', type='tInteger' }} )
				};			
	}
}

-- rules to create operations
rule createOperation(name: String, retType: String, parms: Set( TupleType( name: String, type: String)) ) {
	
	to
	oper: Design!Operation(
		name <- name
	)
	do	{
		oper.ownedParameter <- parms->collect( p | thisModule.createParameterv2(p.name, p.type, #"in") ) 
				->union( Set{ thisModule.createParameterv2('parm1', retType, #"return") });
		
		-- , thisModule.createParameter('parm2', 't'+retType, #"in") } );
		
		oper;
	}
}

-- rules to create parameters
rule createParameter(name: String, retType: String, dir: Design!ParameterDirectionKind ) {
	
	to
	par: Design!Parameter(
		name <- name
		, type <- thisModule.resolveTemp(thisModule.sourceModel, retType)
		, direction <- dir
	)
	do	{
		par;
	}
}

-- rules to create parameters
rule createParameterv2(name: String, type: String, dir: Design!ParameterDirectionKind ) {
	
	to
	par: Design!Parameter(
		name <- name
		, direction <- dir
	)
	do	{
		par.type <- if ( thisModule.sourceModel.referencedInCRUDUseCase()->select(y | y.name = type)->notEmpty() )	
		then 
			thisModule.sourceModel.referencedInCRUDUseCase()->select(x | x.name = type)->asOrderedSet()->first()
		else 
			thisModule.resolveTemp(thisModule.sourceModel, type)
		endif;
		
		-- return the new object
		par;
	}
}
