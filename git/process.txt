| Step | Branches | Environments | Usage of Environments | Explanation |
| --- | --- | --- | --- | --- |
| 1. Initialize the Repository | `main` | Local | Setup your local environment. This is where you initialize your Git repository. | You have one branch, `main`. |
| 2. Create the Main Branches | `main`, `develop` | Local | Continue using your local environment. This is where you create the `develop` branch based off of `main`. | Create the `develop` branch based off of `main`. |
| 3. Feature Branches | `feature/<feature-name>`, `develop` | Local, Development | Start developing and testing the feature in your local environment. Once the feature is ready for team review, it can be deployed to a shared development environment for further testing and integration. | For each new feature, create a new branch based off of `develop`. |
| 4. Work on the Feature | `feature/<feature-name>` | Local, Development | Continue developing and testing the feature in your local environment. Regularly pull the latest changes from `develop` into your feature branch to keep it up-to-date. | Make your changes and commit them to the feature branch. |
| 5. Merge the Feature | `develop` | Development, Testing | After the feature is tested and ready to be added to the upcoming release, it can be merged into `develop`. At this point, you might deploy to a shared development or testing environment for further testing and integration. | Once the feature is tested and ready to be added to the upcoming release, merge it into `develop`. |
| 6. Delete the Feature Branch | `develop` | Development, Testing | Continue using the development or testing environment. After the feature branch has been merged into `develop`, delete the feature branch as it's no longer needed. | After the feature branch has been merged into `develop`, delete the feature branch. |
| 7. Release Branches | `release/<version-number>`, `develop` | Staging | Once `develop` has acquired enough features for a release, you can fork a release branch off of `develop`. This is the point where you'll do final preparations for the release, like minor bug fixes, documentation review, etc. You might have a staging environment where this branch is deployed. | Once `develop` has acquired enough features for a release, you can fork a release branch off of `develop`. |
| 8. Finish the Release | `main`, `develop` | Production | When the release is ready to be made live, it should be merged into `main` and `develop`. This is the point where you would build the final version of your application and deploy it to a production environment. | When the release is ready to be made live, it should be merged into `main` and `develop`. |
| 9. Tag the Release | `main` | Production | Continue monitoring the production environment. Tag each release in the commit history. | Tag each release in the commit history. |
| 10. Delete the Release Branch | `main`, `develop` | Production | Continue monitoring the production environment. After the release branch has been merged into `main` and `develop`, delete the release branch as it's no longer needed. | After the release branch has been merged into `main` and `develop`, delete the release branch. |
| 11. Hotfix Branches | `hotfix/<hotfix-name>`, `main` | Production | Develop and test the hotfix in a separate environment that mirrors production. Maintenance or “hotfix” branches are used to quickly patch production releases. | Maintenance or “hotfix” branches are used to quickly patch production releases. |
| 12. Finish the Hotfix | `main`, `develop` | Production | Deploy the hotfix to the production environment. Both `main` and `develop` include the new commits from your `hotfix/<hotfix-name>` branch. | Both `main` and `develop` include the new commits from your `hotfix/<hotfix-name>` branch. |
| 13. Delete the Hotfix Branch | `main`, `develop` | Production | Continue monitoring the production environment. You're back to two branches, `main` and `develop`. Both branches are at the same commit. | You're back to two branches, `main` and `develop`. Both branches are at the same commit. |
